[{"/Users/farazabidi/Documents/Skill Building/Learning MERN Stack/my-app/src/index.js":"1"},{"size":3603,"mtime":1615273895673,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"10yfwpf","/Users/farazabidi/Documents/Skill Building/Learning MERN Stack/my-app/src/index.js",["7"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\nfunction Square(props){\n  return(\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {  \n  \n  renderSquare(i) {\n    return <Square \n    value={this.props.squares[i]}\n    onClick={() => this.props.handleClick(i)}\n    />;\n  }\n\n  render() {\n\n    return (\n      <div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction PastMoves(props){\n\n}\n\nclass Game extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      currentPlayer: 'X',\n      squares: Array(9).fill(null),\n      history: Array(0).fill(null)\n    }\n    this.state.history.push(this.state.squares);\n  }\n\n  getStatus(){\n    const winner = calculateWinner(this.state.squares);    \n    let status;\n    if(winner)\n      status = 'Winner: ' + winner\n    else\n      status = 'Next player: ' + this.state.currentPlayer;\n\n    return status\n  }\n\n  render() {\n    const history = this.state.history;\n    const moves = history.map((step, move) =>{\n      let description\n      if(move)\n        description = \"Go to move \" + (move+1)\n      else\n        description = \"First Move\"\n      return (\n        <li>\n          <button onClick={()=>this.handlePassedMoveButton(move)}>{description}</button>\n        </li>\n      )\n    });\n    return (      \n\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board \n          squares={this.state.squares}\n          currentPlayer={this.state.currentPlayer}\n          handleClick={(i)=> this.handleClick(i)} \n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{this.getStatus()}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n\n  handlePassedMoveButton(moveNumber){\n    alert(\"Move number: \" + moveNumber)\n    let history = this.state.history.slice();\n    history.splice(moveNumber, 1);\n    const squares = history[history.length-1]\n    this.setState({squares: squares, history: history});\n\n    //set to correct player\n  }\n\n  handleClick(i){\n    const squares = this.state.squares.slice();\n    if(squares[i]) return;\n    if(calculateWinner(squares)) return;\n    \n    squares[i] = this.state.currentPlayer;\n    this.setState({squares: squares});\n    this.updatePlayer();\n    this.updateHistory(); \n  }\n\n  updatePlayer(){\n    if(this.state.currentPlayer === 'X')\n      this.setState({currentPlayer: 'O'})\n    else\n      this.setState({currentPlayer: 'X'})\n  }\n\n  updateHistory(){\n    const history = this.state.history.slice();\n    history.push(this.state.squares);\n    this.setState({history: history});    \n  }\n\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}",{"ruleId":"8","severity":1,"message":"9","line":47,"column":10,"nodeType":"10","messageId":"11","endLine":47,"endColumn":19},"no-unused-vars","'PastMoves' is defined but never used.","Identifier","unusedVar"]